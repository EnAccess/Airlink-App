namespace Airlink.Models
{// <auto-generated using https://app.quicktype.io/>
 //
 // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
 //
 //    using ResourceModels;
 //
 //    var airLinkDevice = AirLinkDevice.FromJson(jsonString);

    namespace ResourceModels
    {
        using System;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class AirLinkDevice
        {
            [JsonProperty("client")]
            public Client Client { get; set; }

            [JsonProperty("shared")]
            public Shared Shared { get; set; }
        }

        public partial class Client
        {/* Ignore Client side properties since device can supply latest values. Could be used in future to detect
          * Device-Server discrepancies due to loss of sync or hacking
          */
        }
        public partial class Shared
        {
            /* Shared properties across all Airlink device resources
             * defined here. Additional properties from server will
             * be ignored.
             */
            [JsonProperty("PRD_sat")]
            public string Sat { get; set; }

            [JsonProperty("PRD_pst")]
            public string Pst { get; set; }

            [JsonProperty("PRD_pu")]
            public string Pu { get; set; }

            [JsonProperty("PRD_psc")]
            public string Psc { get; set; }

            [JsonProperty("PRD_pul")]
            public string Pul { get; set; }

            [JsonProperty("PRC_pst")]
            public string CPst { get; set; }

            [JsonProperty("PRC_rid")]
            public string Rid { get; set; }

            [JsonProperty("PRC_cp")]
            public string Cp { get; set; }

            [JsonProperty("PRC_cn")]
            public string Cn { get; set; }

            [JsonProperty("NXC_cmd")]
            public string NxcCmd { get; set; }

            [JsonProperty("PYG_ltm")]
            public string Ltm { get; set; }

            [JsonProperty("PYG_lts")]
            public string Lts { get; set; }

            [JsonProperty("PYG_ts")]
            public string Ts { get; set; }

            [JsonProperty("PYG_lcr")]
            public string Lcr { get; set; }

            [JsonProperty("PYG_tkn")]
            public string Tkn { get; set; }

            [JsonProperty("PYG_mo")]
            public string Mo { get; set; }

            [JsonProperty("PYG_re")]
            public string Re { get; set; }
        }

        public partial class AirLinkDevice
        {
            public static AirLinkDevice FromJson(string json) => JsonConvert.DeserializeObject<AirLinkDevice>(json, ResourceModels.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this AirLinkDevice self) => JsonConvert.SerializeObject(self, ResourceModels.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }
}
