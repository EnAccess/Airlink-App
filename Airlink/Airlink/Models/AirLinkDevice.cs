using System;
namespace Airlink.Models

{// <auto-generated using https://app.quicktype.io/>
 //
 // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
 //
 //    using ResourceModels;
 //
 //    var airLinkDevice = AirLinkDevice.FromJson(jsonString);

    namespace ResourceModels
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class AirLinkDevice
        {
            [JsonProperty("client")]
            public Client Client { get; set; }

            [JsonProperty("shared")]
            public Shared Shared { get; set; }
        }

        public partial class Client
        {
            [JsonProperty("cbor")]
            public string Cbor { get; set; }

            [JsonProperty("cr")]
            public long Cr { get; set; }

            [JsonProperty("did")]
            public long Did { get; set; }

            [JsonProperty("ft")]
            public long Ft { get; set; }

            [JsonProperty("fv")]
            public long Fv { get; set; }

            [JsonProperty("gts")]
            public long Gts { get; set; }

            [JsonProperty("la")]
            public long La { get; set; }

            [JsonProperty("ln")]
            public double Ln { get; set; }

            [JsonProperty("lt")]
            public double Lt { get; set; }

            [JsonProperty("pst")]
            public long Pst { get; set; }

            [JsonProperty("pu")]
            public string Pu { get; set; }

            [JsonProperty("rv")]
            public long Rv { get; set; }
        }

        public partial class Shared
        {
            [JsonProperty("NXC_cmd")]
            public string Cbor { get; set; }

            [JsonProperty("cr")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Cr { get; set; }

            [JsonProperty("did")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Did { get; set; }

            [JsonProperty("ft")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Ft { get; set; }

            [JsonProperty("fv")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Fv { get; set; }

            [JsonProperty("gts")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Gts { get; set; }

            [JsonProperty("la")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long La { get; set; }

            [JsonProperty("ln")]
            public string Ln { get; set; }

            [JsonProperty("lt")]
            public string Lt { get; set; }

            [JsonProperty("payg")]
            public long Payg { get; set; }

            [JsonProperty("pst")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Pst { get; set; }

            [JsonProperty("pu")]
            public string Pu { get; set; }

            [JsonProperty("rv")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Rv { get; set; }

            [JsonProperty("ssn")]
            public string Ssn { get; set; }
        }

        public partial class AirLinkDevice
        {
            public static AirLinkDevice FromJson(string json) => JsonConvert.DeserializeObject<AirLinkDevice>(json, ResourceModels.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this AirLinkDevice self) => JsonConvert.SerializeObject(self, ResourceModels.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }
}
