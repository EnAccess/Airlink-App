using System;
namespace Airlink.Models
{// <auto-generated />
 //
 // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
 //
 //    using JWTLoginResponse;
 //
 //    var JWTLoginResponse = JWTLoginResponse.FromJson(jsonString);

    namespace JWTLoginSpace
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class JWTLoginResponse
        {
            [JsonProperty("token")]
            public string Token { get; set; }

            [JsonProperty("refreshToken")]
            public string RefreshToken { get; set; }
            internal static object FromJson(object p)
            {
                throw new NotImplementedException();
            }
        }

        public partial class JWTLoginResponse
        {
            public static JWTLoginResponse FromJson(string json) => JsonConvert.DeserializeObject<JWTLoginResponse>(json, JWTLoginSpace.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this JWTLoginResponse self) => JsonConvert.SerializeObject(self, JWTLoginSpace.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}